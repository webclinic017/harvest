[{"function": "config(self)", "index": "config", "short_description": "This method is called before all other methods (except for __init__) and initializes parameters for this class.", "long_description": "- interval: The string specifying the interval to run the algorithm. Choose from \"15SEC\", \"1MIN\", \"5MIN\", \"15MIN\", \"30MIN\", \"1HR\", \"1DAY\".\n- aggregations: A List of strings specifying the intervals to aggregate data. Choose from \"1MIN\", \"5MIN\", \"15MIN\", \"30MIN\", \"1HR\", \"1DAY\".\n- watchlist: A List of strings specifying the stock/crypto assets this algorithm tracks. Crypto assets must be prepended with a '@' symbol.\n\nAny parameters set to None or an empty List will fall back to respective paramters set in the Trader class.\n\nExample\n```python\ndef config(self):\n    self.interval = \"5MIN\"\n    self.aggregations = [\"15MIN\", \"30MIN\", \"1DAY\"]\n    self.watchlist = [\"AAPL\", \"@BTC\"]\n```", "params": [], "returns": "", "raises": []}, {"function": "setup(self)", "index": "setup", "short_description": "Method called right before algorithm begins.", "long_description": null, "params": [], "returns": "", "raises": []}, {"function": "main(self)", "index": "main", "short_description": "Main method to run the algorithm.", "long_description": null, "params": [], "returns": "", "raises": []}, {"function": "buy(self, symbol, quantity, in_force, extended)", "index": "buy", "short_description": "Buys the specified asset.", "long_description": "When called, a limit buy order is placed with a limit\nprice 5% higher than the current price. This is a general function that can\nbe used to buy stocks, crypto, and options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of the asset to buy.\nIf not specified, ", "default": "first symbol in watchlist.\nCrypto assets must be prepended with a '@' symbol.\nWhen buying options, the symbol must be formatted in OCC format", "optional": true}, {"name": "quantity", "type": "float", "desc": "Quantity of asset to buy. If not specified,\nit will buy as many as possible given the current buying power", "default": null, "optional": true}, {"name": "in_force", "type": "str", "desc": "Duration the order is in force.\nChoose from 'gtc' (Good 'til canceled) or 'gtd' (). ", "default": "'gtc'", "optional": true}, {"name": "extended", "type": "str", "desc": "Whether to trade in extended hours or not. Defaults to Fals", "default": null, "optional": true}], "returns": "The following Python dictionary\n- order_id: str, ID of order\n- symbol: str, symbol of asset", "raises": [{"type": "Exception", "desc": "There is an error in the order process."}]}, {"function": "sell(self, symbol, quantity, in_force, extended)", "index": "sell", "short_description": "Sells the specified asset.", "long_description": "When called, a limit sell order is placed with a limit\nprice 5% lower than the current price. This is a general function that can\nbe used to sell stocks, crypto, and options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of the asset to sell.\nIf not specified, ", "default": "first symbol in watchlist.\nCrypto assets must be prepended with a '@' symbol.\nWhen selling options, the symbol must be formatted in OCC format", "optional": true}, {"name": "quantity", "type": "float", "desc": "Quantity of asset to sell. If not specified,\nit will sell all currently owned quantity", "default": null, "optional": true}, {"name": "in_force", "type": "str", "desc": "Duration the order is in force.\nChoose from 'gtc' (Good 'til canceled) or 'gtd' (). Defaults to 'gtc", "default": null, "optional": true}, {"name": "extended", "type": "str", "desc": "Whether to trade in extended hours or not. Defaults to Fals", "default": null, "optional": true}], "returns": "A dictionary with the following keys:\n- order_id: str, ID of order\n- symbol: str, symbol of asset", "raises": [{"type": "Exception", "desc": "There is an error in the order process."}]}, {"function": "get_option_market_data(self, symbol)", "index": "get_option_market_data", "short_description": "Retrieves data of specified option.", "long_description": "Note that the price returned by this function returns the price per contract,\nnot the total price of the option.", "params": [{"name": "symbol", "type": "str", "desc": "OCC symbol of optio", "default": null, "optional": true}], "returns": "A dictionary:\n- price: price of option\n- ask: ask price\n- bid: bid price", "raises": []}, {"function": "get_option_chain(self, symbol, date)", "index": "get_option_chain", "short_description": "Returns the option chain for the specified symbol and expiration date.", "long_description": "The date parameter can either be a string in the format \"YYYY-MM-DD\" or a datetime object.\nThis function is often used in conjunction with the get_option_chain_info function in order to\nretrieve the available expiration dates.", "params": [{"name": "symbol", "type": "str", "desc": "symbol of stoc", "default": null, "optional": false}, {"name": "date", "type": null, "desc": "date of option expiratio", "default": null, "optional": null}], "returns": "A dataframe with the follwing columns:\n    - exp_date(datetime.datetime): The expiration date, as offset-naive DateTime object\n    *with timezone adjusted to the timezone of the exchange being used*\n    - strike(float): Strike price\n    - type(str): 'call' or 'put'\n\nThe index is the OCC symbol of the option.", "raises": []}, {"function": "get_option_chain_info(self, symbol)", "index": "get_option_chain_info", "short_description": "Returns data of a stock's option chain.", "long_description": "Given a stock's symbol, this function returns a dictionary with two data.\nThe first is a list indicating the available expiration dates of the option.\nThe second is the multiplier, which indicates how many contracts are in a single option.\nFor example, if you buy an option priced at $1.20 and the multiplier is 100,\nyou will need to pay $120 to buy one option.\n\nThis function is often used in conjunction with the get_option_chain function.", "params": [{"name": "symbol", "type": "str", "desc": "symbol of stock. ", "default": "first symbol in watchlist", "optional": true}], "returns": "A dict with the following keys:\n- exp_dates: List of expiration dates as strings in the format \"YYYY-MM-DD\"\n- multiplier: float. Multiplier of the option, usually 100", "raises": []}, {"function": "filter_option_chain(self, symbol, type, lower_exp, upper_exp, lower_strike, upper_strike)", "index": "filter_option_chain", "short_description": "Returns a DataFrame of options that satisfies the criteria specified.", "long_description": "The lower_exp and upper_exp input can either be a string in the format \"YYYY-MM-DD\" or a datetime object.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock. ", "default": "first symbol in watchlist", "optional": false}, {"name": "type", "type": "str", "desc": "'call' or 'put", "default": null, "optional": true}, {"name": "lower_exp", "type": "str", "desc": "Minimum expiration date of the option, inclusive", "default": null, "optional": true}, {"name": "upper_exp", "type": "str", "desc": "Maximum expiration date of the option, inclusive", "default": null, "optional": true}, {"name": "lower_strike", "type": "float", "desc": "The minimum strike price of the option, inclusive", "default": null, "optional": false}, {"name": "upper_strike", "type": "float", "desc": "The maximum strike price of the option, inclusive", "default": null, "optional": false}], "returns": "A DataFrame, with an index of strings representing the OCC symbol of options, and the following columns\n|symbol | type | strike\n|-------|------|-------\n|(str) ticker of stock | 'call' or 'put' | (float) strike price", "raises": []}, {"function": "ema(self, symbol, period, interval, ref, prices)", "index": "ema", "short_description": "Calculate EMA", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of EMA. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A list in numpy format, containing EMA values", "raises": []}, {"function": "rsi(self, symbol, period, interval, ref, prices)", "index": "rsi", "short_description": "Calculate RSI", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of RSI. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A list in numpy format, containing RSI values", "raises": []}, {"function": "sma(self, symbol, period, interval, ref, prices)", "index": "sma", "short_description": "Calculate SMA", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of SMA. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A list in numpy format, containing SMA values", "raises": []}, {"function": "bbands(self, symbol, period, interval, ref, dev, prices)", "index": "bbands", "short_description": "Calculate Bollinger Bands", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of BBands. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "dev", "type": "float", "desc": "Standard deviation of the bands. ", "default": "1.0", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A tuple of numpy lists, each a list of BBand top, average, and bottom values", "raises": []}, {"function": "get_account_buying_power(self)", "index": "get_account_buying_power", "short_description": "Returns the current buying power of the user.", "long_description": null, "params": [], "returns": "The current buying power as a float.", "raises": []}, {"function": "get_account_equity(self)", "index": "get_account_equity", "short_description": "Returns the current equity.", "long_description": null, "params": [], "returns": "The current equity as a float.", "raises": []}, {"function": "get_asset_current_candle(self, symbol)", "index": "get_asset_current_candle", "short_description": "Returns the most recent candle as a pandas DataFrame", "long_description": "This function is not compatible with options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock or crypto asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Price of asset as a dataframe with the following columns:\n- open\n    - high\n    - low\n    - close\n    - volume\n\nThe index is a datetime object", "raises": [{"type": "Exception", "desc": "If symbol is not in the watchlist."}]}, {"function": "get_asset_candle_list(self, symbol)", "index": "get_asset_candle_list", "short_description": "Returns the candles of an asset as a pandas DataFrame", "long_description": "This function is not compatible with options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock or crypto asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Prices of asset as a dataframe with the following columns:\n- open\n    - high\n    - low\n    - close\n    - volume\n\nThe index is a datetime object", "raises": [{"type": "Exception", "desc": "If symbol is not in the watchlist."}]}, {"function": "get_asset_avg_cost(self, symbol)", "index": "get_asset_avg_cost", "short_description": "Returns the average cost of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Average cost of asset. Returns None if asset is not being tracked.", "raises": [{"type": "Exception", "desc": "If symbol is not currently owned."}]}, {"function": "get_date(self)", "index": "get_date", "short_description": "Returns the current date.", "long_description": null, "params": [], "returns": "The current date as a datetime object", "raises": []}, {"function": "get_datetime(self)", "index": "get_datetime", "short_description": "Returns the current date and time.", "long_description": "The returned datetime object is offset-naive, adjusted to the local timezone.", "params": [], "returns": "The current date and time as a datetime object", "raises": []}, {"function": "get_asset_current_price(self, symbol)", "index": "get_asset_current_price", "short_description": "Returns the current price of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Price of asset.", "raises": [{"type": "Exception", "desc": "If symbol is not in the watchlist."}]}, {"function": "get_asset_price_list(self, symbol, interval, ref)", "index": "get_asset_price_list", "short_description": "Returns a list of recent prices for an asset.", "long_description": "This function is not compatible with options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock or crypto asset. ", "default": "first symbol in watchlist", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval of data. ", "default": "the interval of the algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}], "returns": "List of prices", "raises": []}, {"function": "get_asset_quantity(self, symbol, include_pending_buy, include_pending_sell)", "index": "get_asset_quantity", "short_description": "Returns the quantity owned of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of asset. ", "default": "first symbol in watchlist", "optional": true}, {"name": "include_pending_buy", "type": "bool", "desc": "Include pending buy orders in quantity. ", "default": "True", "optional": true}, {"name": "include_pending_sell", "type": "bool", "desc": "Include pending sell orders in quantity. ", "default": "False", "optional": true}], "returns": "Quantity of asset as float. 0 if quantity is not owned.", "raises": [{"type": null, "desc": ""}]}, {"function": "get_asset_profit_percent(self, symbol)", "index": "get_asset_profit_percent", "short_description": "Returns the return of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock, crypto, or option. Options should be in OCC format.\n", "default": "first symbol in watchlist", "optional": true}], "returns": "Return of asset, expressed as a decimal.", "raises": []}, {"function": "get_time(self)", "index": "get_time", "short_description": "Returns the current hour and minute.", "long_description": "This returns the current time, which is different from the timestamp\nof stock prices. For example, if you are running an algorithm every 5 minutes,\nat 11:30am you will get price data with a timestamp of 11:25am. This function will return\n11:30am.", "params": [], "returns": "The current time as a datetime object", "raises": []}, {"function": "get_account_stock_positions(self)", "index": "get_account_stock_positions", "short_description": "Returns the current stock positions.", "long_description": null, "params": [], "returns": "A list of Position objects for all currently owned stocks.", "raises": []}, {"function": "get_account_crypto_positions(self)", "index": "get_account_crypto_positions", "short_description": "Returns the current crypto positions.", "long_description": null, "params": [], "returns": "A list of Position objects for all currently owned crypto.", "raises": []}, {"function": "get_account_option_positions(self)", "index": "get_account_option_positions", "short_description": "Returns the current option positions.", "long_description": null, "params": [], "returns": "A list of OptionPosition objects for all currently owned options.", "raises": []}, {"function": "get_watchlist(self)", "index": "get_watchlist", "short_description": "Returns the current watchlist.", "long_description": null, "params": [], "returns": "", "raises": []}]